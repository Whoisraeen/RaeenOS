name: RaeenOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: release
  TARGET_ARCH: x86_64

jobs:
  # Static Analysis and Code Quality
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential nasm gcc-multilib
          sudo apt-get install -y clang-tidy cppcheck
          sudo apt-get install -y doxygen graphviz
          sudo apt-get install -y valgrind

      - name: Run static analysis
        run: |
          make clean
          make CFLAGS="-Wall -Wextra -Werror -pedantic -std=c11" verbose

      - name: Run clang-tidy
        run: |
          find kernel/ -name "*.c" -o -name "*.h" | xargs clang-tidy -checks=*,-fuchsia-*,-google-*,-zircon-*,-abseil-*,-modernize-use-trailing-return-type

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --error-exitcode=1 kernel/ bootloader/ tools/

      - name: Check code formatting
        run: |
          find kernel/ bootloader/ tools/ -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror

      - name: Generate documentation
        run: |
          make docs

  # Build and Test on Multiple Platforms
  build-test:
    name: Build and Test
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64, i386]
        exclude:
          - platform: macos-latest
            arch: i386
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential nasm gcc-multilib
          sudo apt-get install -y qemu-system-x86 qemu-system-i386
          sudo apt-get install -y grub-pc-bin xorriso

      - name: Setup build environment (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # Install MSYS2 and toolchain
          choco install msys2
          msys2 -c "pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-nasm mingw-w64-x86_64-make"

      - name: Setup build environment (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          brew install gcc nasm make
          brew install qemu

      - name: Build for x86_64
        if: matrix.arch == 'x86_64'
        run: |
          make clean
          make TARGET_ARCH=x86_64 BUILD_TYPE=release verbose

      - name: Build for i386
        if: matrix.arch == 'i386'
        run: |
          make clean
          make TARGET_ARCH=i386 BUILD_TYPE=release verbose

      - name: Run unit tests
        run: |
          make test

      - name: Run integration tests
        run: |
          make test TEST_CATEGORY=integration

      - name: Run system tests
        run: |
          make test TEST_CATEGORY=system

      - name: Test bootable ISO
        if: matrix.platform == 'ubuntu-latest'
        run: |
          # Test ISO boot in QEMU
          timeout 30s qemu-system-x86_64 -cdrom build/bin/raeenos.iso -m 512M -nographic || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: raeenos-${{ matrix.platform }}-${{ matrix.arch }}
          path: build/bin/

  # Security Analysis
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install security tools
        run: |
          sudo apt-get update
          sudo apt-get install -y bandit safety
          pip install bandit safety

      - name: Run security scan
        run: |
          # Scan for common security issues
          bandit -r kernel/ -f json -o security-report.json || true
          
          # Check for known vulnerabilities
          safety check || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install performance tools
        run: |
          sudo apt-get update
          sudo apt-get install -y perf-tools-unstable
          sudo apt-get install -y valgrind

      - name: Build for performance testing
        run: |
          make clean
          make BUILD_TYPE=profile verbose

      - name: Run performance tests
        run: |
          make test TEST_CATEGORY=performance

      - name: Run memory leak detection
        run: |
          valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-output.txt make test

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: |
            valgrind-output.txt
            build/tests/performance/

  # Cross-compilation Testing
  cross-compile:
    name: Cross-compilation Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64-linux-gnu, arm-linux-gnueabi, mips-linux-gnu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross-compilation toolchains
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi gcc-mips-linux-gnu
          sudo apt-get install -y binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi binutils-mips-linux-gnu

      - name: Cross-compile for ${{ matrix.target }}
        run: |
          make clean
          make CROSS_COMPILE=${{ matrix.target }}- TARGET_ARCH=${{ matrix.target }} BUILD_TYPE=release verbose

      - name: Upload cross-compiled artifacts
        uses: actions/upload-artifact@v3
        with:
          name: raeenos-${{ matrix.target }}
          path: build/bin/

  # Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install documentation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          sudo apt-get install -y pandoc

      - name: Generate API documentation
        run: |
          make docs

      - name: Generate user manual
        run: |
          pandoc docs/USER_MANUAL.md -o build/docs/user-manual.pdf

      - name: Generate developer guide
        run: |
          pandoc docs/DEVELOPER_GUIDE.md -o build/docs/developer-guide.pdf

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: build/docs/

  # Release Build
  release:
    name: Release Build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, security, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential nasm gcc-multilib
          sudo apt-get install -y grub-pc-bin xorriso

      - name: Build release version
        run: |
          make clean
          make BUILD_TYPE=release TARGET_ARCH=x86_64 verbose

      - name: Create release package
        run: |
          mkdir -p release
          cp build/bin/raeenos.iso release/
          cp build/docs/*.pdf release/
          cp README.md release/
          cp LICENSE release/
          tar -czf raeenos-${{ github.event.release.tag_name }}.tar.gz release/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: raeenos-release-${{ github.event.release.tag_name }}
          path: raeenos-${{ github.event.release.tag_name }}.tar.gz

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install coverage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov gcovr

      - name: Build with coverage
        run: |
          make clean
          make CFLAGS="-fprofile-arcs -ftest-coverage" BUILD_TYPE=debug verbose

      - name: Run tests with coverage
        run: |
          make test
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Generate coverage report
        run: |
          genhtml coverage.info --output-directory coverage-report

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage.info
          flags: unittests
          name: codecov-umbrella

  # Dependency Analysis
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependency tools
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          pip install pipdeptree

      - name: Analyze dependencies
        run: |
          # Generate dependency graph
          make deps
          
          # Check for outdated dependencies
          pip list --outdated || true

      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: build/deps/

  # Final Status Check
  status:
    name: Final Status Check
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, security, performance, coverage]
    if: always()
    steps:
      - name: Check job status
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.build-test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.performance.result }}" == "success" && 
                "${{ needs.coverage.result }}" == "success" ]]; then
            echo "All checks passed!"
            exit 0
          else
            echo "Some checks failed!"
            exit 1
          fi 